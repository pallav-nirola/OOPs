Q 1
#include <iostream>
using namespace std;
class triangle
{
private:
    float base;
    float height;

public:
    triangle(float b, float h)
    {
        base = b;
        height = h;
    }
    int get_area() const
    {
        return (base * height) / 2;
    }
    static triangle compareArea(triangle &tri1, triangle &tri2)
    {
        if (tri1.get_area() >= tri2.get_area())
        {
            return tri1;
        }
        else
        {
            return tri2;
        }
    }
    void display() const
    {
cout << "Base: " << base << ", Height: " << height
             << ", Area: " << get_area() << endl;
    }
};
int main()
{
    triangle t1(10, 60);
    triangle t2(98, 99);
    triangle larger = triangle ::   compareArea(t1,t2);
   larger.display();

    return 0;}
Q 2
#include<iostream>
using namespace std;
struct ginti{
int customers;
int items;

};
int main() {
    ginti count = {12,20};
    cout<<count.items<<endl;
    cout<<count.customers<<endl;
    return 0;
}
// using class if was allowed;
#include <iostream>
using namespace std;


class ginti
{
    public:
    static int customer;
    static int items;
};
int ginti ::customer = 20;
int ginti ::items = 12;
int main()
{
    cout << ginti::items << endl;
    cout << ginti::customer << endl;
    return 0;
}
Q 2 a
#include<iostream>
using namespace std;
class Car{
private:
float avg_speed ;
float fuel;
public:
Car(float avg_speed , float fuel){
this->fuel  = fuel;
this ->avg_speed = avg_speed ;
}
int get_distance_covered(){
    int x = avg_speed*3600;
    return x;

}
int get_mileage(){
    float y = get_distance_covered();
    return (y/fuel);// cannot directly access x as it is a local variable;
}

};
int main() {
    Car c1(80.5,22.2);
    cout<<c1.get_distance_covered()<<endl;
    cout<<c1.get_mileage()<<endl;

    return 0;}
Q 4 
#include <iostream>
using namespace std;

class Donor
{
private:
    string donor_name;
    double balance;

public:
    Donor(string name, double amount)
    {
        donor_name = name;
        balance = amount;
    }
    string naam()
    {
        return donor_name;
    }
    void display()
    {
        cout << donor_name << endl;
        cout << balance << endl;
    }
    double get_balance()
    {
        return balance;
    }
    double remaining_balance(int amt)
    {
        int x = get_balance() - amt;
        return x;
    }
};
class Recipient
{
private:
    string recipient_name;
    double
        account_balance;
    double amount_required;

public:
    Recipient(string name, double balance, double amount)
    {
        recipient_name = name;
        account_balance = balance;
        amount_required = amount;
    }
    double get_balance()
    {
        return account_balance;
    }
    int added_Amount(int Amt)
    {
        int y = get_balance() + Amt;
        return y;
    }
    void display()
    {
        cout << recipient_name;
        cout << endl;
        cout << account_balance<<endl;
        cout << amount_required<<endl;
    }
    string naam()
    {
        return recipient_name;
    }
};
void transfer(Donor &donor, Recipient &recipient, double amount)
{
    if (donor.get_balance() > amount)
    {
        donor.remaining_balance(amount);
        recipient.added_Amount(amount);
        cout << "Amount transferred of " << amount << "from A/C holder " << donor.naam() << " to " << recipient.naam() << endl;
    }
    else
    {
        cout << "LAck of money in donor account" << endl;
    }
}
int main()
{
    Donor d1("RaashFord", 1000);
    Recipient r1("Ali", 400, 200);
    d1.display();
    r1.display();
    transfer(d1, r1,200);

    return 0;
}
Q 5 
#include <iostream>
using namespace std;
class Number
{

private:
    int a;
    int b;
    int c;
    int d;

public:
    Number()
    {
        a = b = c = d = 0;
        cout << "Constructor I called" << endl;
    }
    Number(int pos_1, int pos_2)
    {
        a = pos_1;
        b = pos_2;
        c = d = 0; // remaining values set to 0
        cout << "Parameterized Constructor (2 params) called" << endl;
    }
    Number(int pos_4, int pos_5, int pos_3, int pos_6)
    {
        a = pos_4;
        b = pos_5;
        c = pos_3;
        d = pos_6;
        cout << "Parameterized Constructor (4 params) called" << endl;
    }
    Number(const Number &obj)
    {
        a = obj.a;
        b = obj.b;
        c = 0 ;
        d = 0;
        
        cout << "This copy constructor is called" << endl;
    }
    void showdata()
    {
        cout << " a " << a << endl;
        cout << " b " << b << endl;
        cout << " c " << c << endl;
        cout << " d " << d << endl;
    }
};
int main()
{
    Number n1;
    Number n2(10, 20);
    Number n3(30, 40, 50, 60);
    Number n4(n2);
    Number n5 = n1;
    n1.showdata();
    n2.showdata();
    n3.showdata();
    n4.showdata();

    return 0;
}
Q 6
#include <iostream>
using namespace std;
class Compnay
{
protected:
    string company_name;
    string location;

public:
    Compnay(string name, string loc)
    {
        company_name = name;
        location = loc;
    }
    void show_Comapny_details()
    {
        cout << "company name " << company_name << endl;
        cout << "location" << location << endl;
    }
};
class Team : public Compnay
{
protected:
    string team_name;
    string project;

public:
    Team(string name, string loc, string t_name, string pro) : Compnay(name, loc)
    {
        team_name = t_name;
        project = pro;
    }
    void show_Team_details()
    {
        cout << " team_nam " << team_name << endl;
        cout << "project" << project << endl;
    }
};
class Developer : public Team
{
protected:
    string develop_name;
    string programming_language;
    public:
    Developer(string name, string loc, string t_name, string pro, string develop, string langu) : Team(name, loc, t_name, pro)
    {
        develop_name = develop;
        programming_language = langu;
    }
    void show_Developer_details()
    {
        cout << " developer_name " << develop_name << endl;
        cout << "programming_language" << programming_language << endl;
        show_Team_details();
       show_Comapny_details();
    }
};

int main()
{
    Developer d1("Google", "California", "AI Research", "Chatbot",
                 "Rahul", "C++");
    d1.show_Developer_details();

    return 0;
}
Q 3
#include <iostream>
using namespace std;
class Shopping_cart
{
private:
    int cart_id;
    string customer_name;
    int item_count;

public:
    Shopping_cart(int id, string name, int count)
    {

        cart_id = id;
        customer_name = name;
        item_count = count;
    }

    void display_cart()
    {
        cout << "Cart ID" << cart_id << endl;
        cout << "customer_name" << customer_name << endl;
        cout << "item_count" << item_count << endl;
    }
};

class CartManager
{
private:
    Shopping_cart *ptr; // pointer called ptr that can point to a Shopping_cart object (or the first element of a collection of them).”
    int n;              // number of carts

public:
    // Constructor: dynamically create carts
    CartManager(int size)
    {
        n = size;
        ptr = new Shopping_cart[n]; // Allocates memory on the heap for n objects of type Shopping_cart. and Returns the address of the first object in this block of memory.

        for (int i = 0; i < n; i++)
        {
            int id, count;
            string name;

            cout << "\nEnter details for Cart " << i + 1 << ":\n";
            cout << "Cart ID: ";
            cin >> id;
            cout << "Customer Name: ";
            cin >> name;
            cout << "Item Count: ";
            cin >> count;

            ptr[i] = Shopping_cart(id, name, count);
        }
    }

    // Display all carts
    void displayCarts()
    {
        cout << "\n--- Shopping Cart Details ---\n";
        for (int i = 0; i < n; i++)
        {
            ptr[i].display_cart();
            cout << "--------------------------\n";
        }
    }

    ~CartManager()
    {
        delete[] ptr;
        cout << "All carts deleted successfully!" << endl;
    }
};
int main()
{
    int n;
    cout << "Enter number of shopping carts: ";
    cin >> n;

    CartManager manager(n);
    manager.displayCarts();

    return 0;
}
