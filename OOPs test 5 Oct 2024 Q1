Q 1
#include <iostream>
using namespace std;
class triangle
{
private:
    float base;
    float height;

public:
    triangle(float b, float h)
    {
        base = b;
        height = h;
    }
    int get_area() const
    {
        return (base * height) / 2;
    }
    static triangle compareArea(triangle &tri1, triangle &tri2)
    {
        if (tri1.get_area() >= tri2.get_area())
        {
            return tri1;
        }
        else
        {
            return tri2;
        }
    }
    void display() const
    {
cout << "Base: " << base << ", Height: " << height
             << ", Area: " << get_area() << endl;
    }
};
int main()
{
    triangle t1(10, 60);
    triangle t2(98, 99);
    triangle larger = triangle ::   compareArea(t1,t2);
   larger.display();

    return 0;}
Q 2
#include<iostream>
using namespace std;
struct ginti{
int customers;
int items;

};
int main() {
    ginti count = {12,20};
    cout<<count.items<<endl;
    cout<<count.customers<<endl;
    return 0;
}
// using class if was allowed;
#include <iostream>
using namespace std;


class ginti
{
    public:
    static int customer;
    static int items;
};
int ginti ::customer = 20;
int ginti ::items = 12;
int main()
{
    cout << ginti::items << endl;
    cout << ginti::customer << endl;
    return 0;
}
Q 2 a
#include<iostream>
using namespace std;
class Car{
private:
float avg_speed ;
float fuel;
public:
Car(float avg_speed , float fuel){
this->fuel  = fuel;
this ->avg_speed = avg_speed ;
}
int get_distance_covered(){
    int x = avg_speed*3600;
    return x;

}
int get_mileage(){
    float y = get_distance_covered();
    return (y/fuel);// cannot directly access x as it is a local variable;
}

};
int main() {
    Car c1(80.5,22.2);
    cout<<c1.get_distance_covered()<<endl;
    cout<<c1.get_mileage()<<endl;

    return 0;}
Q 4 
#include <iostream>
using namespace std;

class Donor
{
private:
    string donor_name;
    double balance;

public:
    Donor(string name, double amount)
    {
        donor_name = name;
        balance = amount;
    }
    string naam()
    {
        return donor_name;
    }
    void display()
    {
        cout << donor_name << endl;
        cout << balance << endl;
    }
    double get_balance()
    {
        return balance;
    }
    double remaining_balance(int amt)
    {
        int x = get_balance() - amt;
        return x;
    }
};
class Recipient
{
private:
    string recipient_name;
    double
        account_balance;
    double amount_required;

public:
    Recipient(string name, double balance, double amount)
    {
        recipient_name = name;
        account_balance = balance;
        amount_required = amount;
    }
    double get_balance()
    {
        return account_balance;
    }
    int added_Amount(int Amt)
    {
        int y = get_balance() + Amt;
        return y;
    }
    void display()
    {
        cout << recipient_name;
        cout << endl;
        cout << account_balance<<endl;
        cout << amount_required<<endl;
    }
    string naam()
    {
        return recipient_name;
    }
};
void transfer(Donor &donor, Recipient &recipient, double amount)
{
    if (donor.get_balance() > amount)
    {
        donor.remaining_balance(amount);
        recipient.added_Amount(amount);
        cout << "Amount transferred of " << amount << "from A/C holder " << donor.naam() << " to " << recipient.naam() << endl;
    }
    else
    {
        cout << "LAck of money in donor account" << endl;
    }
}
int main()
{
    Donor d1("RaashFord", 1000);
    Recipient r1("Ali", 400, 200);
    d1.display();
    r1.display();
    transfer(d1, r1,200);

    return 0;
}
